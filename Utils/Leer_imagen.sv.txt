/******************************************************************************/
/******************  Modulo para leer y procesar la imagen   **************/
/******************************************************************************/

module leer_imagen
#(
  parameter     WIDTH  = 640,   // Ancho de la imagen
         HEIGHT  = 480,   // Alto de la imagen
  INFILE  = "./img/kodim01.hex",  // Archivo
  START_UP_DELAY = 100, // Delay para la iniciación
  HSYNC_DELAY = 160,// Delay para la sincronización Horizontal
 // VALUE= 100, // value for Brightness operation
 // THRESHOLD= 90, // Threshold value for Threshold operation
 // SIGN=1         // Sign value using for brightness operation
  // SIGN = 0: Brightness subtraction           
  // SIGN = 1: Brightness addition
)
(
  input HCLK,          // Reloj   
  input HRESETn,         // Reset (activado en semiciclo negativo)
  output VSYNC,        // Pulso para sincronización Vertical 
 // Esta señal tambien es utilizada para indicar si se creó una señal.
  output logic HSYNC,        // Pulso para sincronización Horizontal

  output logic [7:0]  DATA_R0,  // 8 bit Red data (Par)
  output logic [7:0]  DATA_G0,  // 8 bit Green data (Par)
  output logic [7:0]  DATA_B0,  // 8 bit Blue data (par)
  output logic [7:0]  DATA_R1,  // 8 bit Red  data (Impar)
  output logic [7:0]  DATA_G1,  // 8 bit Green data (Impar)
  output logic [7:0]  DATA_B1,  // 8 bit Blue data (Impar)
  // Procesar y transmitir 2 pixeles en paralelo hacen el proceso más rápido (Se puede modificar para hacerlo de 1 en 1 )
  output     ctrl_done     // Bandera de finalización
);   
//-------------------------------------------------
// Señales internas 
//-------------------------------------------------

parameter sizeOfWidth = 8;   // Ancho de los datos 
parameter sizeOfLengthReal = 921600;   // Datos de la imagen : 921600 bytes: 480*640*3


// Parametros locales para máquina de estos
localparam  ST_IDLE  = 2'b00,// Estado inicial
   ST_VSYNC = 2'b01,// Estado para crear vsync 
   ST_HSYNC = 2'b10,// Estado para hsync 
   ST_DATA  = 2'b11;// Estado de proceso de datos 
logic [1:0] cstate,   // Estado actual
nstate;    // Estado siguiente 


logic start;         // Señal de inicio : indica a la FSM iniciar 
logic HRESETn_d;   // Señal retrasada de reset :usada para crear la señal start 
logic   ctrl_vsync_run; // señal del control para el contador de vsync  
logic [8:0] ctrl_vsync_cnt; // contador para  vsync
logic   ctrl_hsync_run; // señal del control para el contador de  hsync 
logic [8:0] ctrl_hsync_cnt; // contador para 
logic   ctrl_data_run; // señal de control para el procesamiento de datos 
logic [7 : 0]   memoria total [0 : sizeOfLengthReal-1];// memoria para guardar los datos de 8-bit de la imagen
// memoria temporal para salvar los datos  : el tamaño será ANCHO*ALTO*3
integer temp_BMP   [0 : WIDTH*HEIGHT*3 - 1];   



integer org_R  [0 : WIDTH*HEIGHT - 1];  // Almacenamiento temporal del componente R 
integer org_G  [0 : WIDTH*HEIGHT - 1]; //  Almacenamiento temporal del componente G
integer org_B  [0 : WIDTH*HEIGHT - 1]; //  Almacenamiento temporal del componente B
// Contando variables 
integer i, j;



logic [ 9:0] row; // index para la fila de la imagen 
logic [10:0] col; // index para la columna 
logic [18:0] data_count; // contador de data para la imagen completa 


//-------------------------------------------------//
// -Leyendo los datos de la imagen de entrada -----//
//-------------------------------------------------//

initial begin
    $readmemh(INFILE,total_memory,0,sizeOfLengthReal-1); // Leyendo el archivo del INFILE
end
// Se usan 3 señales intermedias para RGB 
always@(start) begin
    if(start == 1'b1) begin
        for(i=0; i<WIDTH*HEIGHT*3 ; i=i+1) begin
            temp_BMP[i] = total_memory[i+0][7:0]; 
        end
        
        for(i=0; i<HEIGHT; i=i+1) begin
            for(j=0; j<WIDTH; j=j+1) begin
     // El código de Matlab escribe la imagen desde la última fila hasta la primera fila
     // El código  hace lo mismo en la lectura para guardar correctamente los píxeles de la imagen en 3 memorias RGB separadas
                org_R[WIDTH*i+j] = temp_BMP[WIDTH*3*(HEIGHT-i-1)+3*j+0]; // Salvando componente Rojo
                org_G[WIDTH*i+j] = temp_BMP[WIDTH*3*(HEIGHT-i-1)+3*j+1];// Salvando componente Verde
                org_B[WIDTH*i+j] = temp_BMP[WIDTH*3*(HEIGHT-i-1)+3*j+2];// Salvando componente Azul
            end
        end
    end
end

//---------------------------------------------------------------------------//
// ---Comienza a leer el archivo de imagen una vez que el reset fue alto ---//
// ---creando un pulso inicial (start)-------------------------------------//
//------------------------------------------------------------------------//

always@(posedge HCLK, negedge HRESETn)
begin
    if(!HRESETn) begin
        start <= 0;
  HRESETn_d <= 0;
    end
    else begin           //          ______     
        HRESETn_d <= HRESETn;       //        |  |
  if(HRESETn == 1'b1 && HRESETn_d == 1'b0)  // __0___| 1 |___0____ : se inicia el pulso
   start <= 1'b1;
  else
   start <= 1'b0;
    end
end
//-----------------------------------------------------------------------------------------------//
// Máquina de estado finito para leer datos RGB888 de la memoria y crear pulsos hsync y vsync --//
//-----------------------------------------------------------------------------------------------//
always@(posedge HCLK, negedge HRESETn)
begin
    if(~HRESETn) begin
        cstate <= ST_IDLE;
    end
    else begin
        cstate <= nstate; // se acualiza al siguiente estado  
    end
end



//-----------------------------------------//
//--------- Estado de transmición --------------//
//-----------------------------------------//
// IDLE . VSYNC . HSYNC . DATA

always @(*) begin
 case(cstate)
  ST_IDLE: begin
   if(start)
    nstate = ST_VSYNC;
   else
    nstate = ST_IDLE;
  end   
  ST_VSYNC: begin
   if(ctrl_vsync_cnt == START_UP_DELAY) 
    nstate = ST_HSYNC;
   else
    nstate = ST_VSYNC;
  end
  ST_HSYNC: begin
   if(ctrl_hsync_cnt == HSYNC_DELAY) 
    nstate = ST_DATA;
   else
    nstate = ST_HSYNC;
  end  
  ST_DATA: begin
   if(ctrl_done)
    nstate = ST_IDLE;
   else begin
    if(col == WIDTH - 2)
     nstate = ST_HSYNC;
    else
     nstate = ST_DATA;
   end
  end
 endcase
end

// ---------------------------------------------------------------------------- //
// -Contando el período de tiempo de vsync, hsync, procesamiento de datos----  //
// -------------------------------------------------------------------------- //

always @(*) begin
 ctrl_vsync_run = 0;
 ctrl_hsync_run = 0;
 ctrl_data_run  = 0;
 case(cstate)
  ST_VSYNC:  begin ctrl_vsync_run = 1; end  // trigger counting para vsync
  ST_HSYNC:  begin ctrl_hsync_run = 1; end // trigger counting para hsync
  ST_DATA:  begin ctrl_data_run  = 1; end // trigger counting para data processing
 endcase
end

// Contadores para vsync, hsync
always@(posedge HCLK, negedge HRESETn)
begin
    if(~HRESETn) begin
        ctrl_vsync_cnt <= 0;
  ctrl_hsync_cnt <= 0;
    end
    else begin
        if(ctrl_vsync_run)
   ctrl_vsync_cnt <= ctrl_vsync_cnt + 1; // counting for vsync
  else 
   ctrl_vsync_cnt <= 0;
   
        if(ctrl_hsync_run)
   ctrl_hsync_cnt <= ctrl_hsync_cnt + 1; // counting for hsync  
  else
   ctrl_hsync_cnt <= 0;
    end
end
// Contando el índice de columna y fila para leer la memoria

always@(posedge HCLK, negedge HRESETn)
begin
    if(~HRESETn) begin
        row <= 0;
  col <= 0;
    end
 else begin
  if(ctrl_data_run) begin
   if(col == WIDTH - 2) begin
    row <= row + 1;
   end
   if(col == WIDTH - 2) 
    col <= 0;
   else 
    col <= col + 2; // reading 2 pixels in parallel
  end
 end
end
//---------------------------------------------------//
//----------------Conteo de datos-------------------//
//-------------------------------------------------//
always@(posedge HCLK, negedge HRESETn)
begin
    if(~HRESETn) begin
        data_count <= 0;
    end
    else begin
        if(ctrl_data_run)
   data_count <= data_count + 1;
    end
end
assign VSYNC = ctrl_vsync_run;
assign ctrl_done = (data_count == 196607)? 1'b1: 1'b0; // done flag
//-------------------------------------------------//
//-------------  Image processing   ---------------//
//-------------------------------------------------//
always @(*) begin
 
 HSYNC   = 1'b0;
 DATA_R0 = 0;
 DATA_G0 = 0;
 DATA_B0 = 0;                                       
 DATA_R1 = 0;
 DATA_G1 = 0;
 DATA_B1 = 0;                                         
 if(ctrl_data_run) begin
  HSYNC   = 1'b1;
 end
end

endmodule